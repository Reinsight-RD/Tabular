{
  "Actions": [
    {
      "Name": "Best Practices\\1. Load BPA Rules",
      "Enabled": "true",
      "Execute": "System.Net.WebClient w = new System.Net.WebClient(); \r\n\r\nstring path = System.Environment.GetFolderPath(System.Environment.SpecialFolder.LocalApplicationData);\r\nstring version = System.Windows.Forms.Application.ProductVersion.Substring(0,1);\r\nstring downloadLoc = path+@\"\\TabularEditor\\BPARules.json\";\r\nif (version == \"3\")\r\n{\r\n    downloadLoc = path+@\"\\TabularEditor3\\BPARules.json\";\r\n}\r\nstring url = \"https://github.com/Reinsight-SE/Tabular/raw/main/BestPractices/BPARules.json\";\r\nstring dlMessage = \"Downloaded BPARules.json. Please restart Tabular Editor.\";\r\n\r\nif (System.IO.File.Exists(downloadLoc))\r\n{\r\n    if (System.Windows.Forms.MessageBox.Show(\"Would you like to overwrite the existing BPARules.json file?\",\"Overwrite Existing BPA Rules\",System.Windows.Forms.MessageBoxButtons.YesNo,System.Windows.Forms.MessageBoxIcon.Warning) == System.Windows.Forms.DialogResult.Yes)\r\n    {\r\n        w.DownloadFile(url, downloadLoc);\r\n        System.Windows.Forms.MessageBox.Show(dlMessage,\"Overwrite Existing BPA Rules\",System.Windows.Forms.MessageBoxButtons.OK,System.Windows.Forms.MessageBoxIcon.Information);\r\n    }\r\n    else\r\n    {\r\n        System.Windows.Forms.MessageBox.Show(\"Did not download BPARules.json.\",\"Overwrite Existing BPA Rules\",System.Windows.Forms.MessageBoxButtons.OK,System.Windows.Forms.MessageBoxIcon.Information);\r\n    }\r\n}\r\nelse\r\n{\r\n    w.DownloadFile(url, downloadLoc);\r\n    System.Windows.Forms.MessageBox.Show(dlMessage,\"Download BPA Rules\",System.Windows.Forms.MessageBoxButtons.OK,System.Windows.Forms.MessageBoxIcon.Information);\r\n}",
      "Tooltip": "Load BPA Rules from github.com/Reinsight-SE/Tabular",
      "ValidContexts": "Model"
    },
    {
      "Name": "Best Practices\\2. Generate Vertipaq Analyzer Stats",
      "Enabled": "true",
      "Execute": "// Store DMV Queries as Data Tables\r\nvar DMV_Tables = ExecuteDax(\"SELECT [ID],[Name] FROM $SYSTEM.TMSCHEMA_TABLES\").Tables[0];\r\nvar DMV_Dimensions = ExecuteDax(\"SELECT [DIMENSION_NAME], [DIMENSION_CARDINALITY] FROM $SYSTEM.MDSCHEMA_DIMENSIONS\").Tables[0];\r\nvar DMV_Relationships = ExecuteDax(\"SELECT [ID],[Name] FROM $SYSTEM.TMSCHEMA_RELATIONSHIPS\").Tables[0];\r\nvar DMV_Hierarchies = ExecuteDax(\"SELECT [ID], [TableID], [Name] FROM $SYSTEM.TMSCHEMA_HIERARCHIES\").Tables[0];\r\nvar DMV_Columns = ExecuteDax(\"SELECT [ID],[TableID],[ExplicitName] FROM $SYSTEM.TMSCHEMA_COLUMNS\").Tables[0];\r\nvar DMV_Partitions = ExecuteDax(\"SELECT [ID],[TableID],[Name] FROM $SYSTEM.TMSCHEMA_PARTITIONS\").Tables[0];\r\nvar DMV_PartitionStorages = ExecuteDax(\"SELECT [ID],[PartitionID] FROM $SYSTEM.TMSCHEMA_PARTITION_STORAGES\").Tables[0];\r\nvar DMV_SegmentMapStorages = ExecuteDax(\"SELECT [PartitionStorageID],[RecordCount],[SegmentCount],[RecordsPerSegment] FROM $SYSTEM.TMSCHEMA_SEGMENT_MAP_STORAGES\").Tables[0];\r\nvar DMV_StorageTableColumns = ExecuteDax(\"SELECT [DIMENSION_NAME],[ATTRIBUTE_NAME],[COLUMN_TYPE],[DICTIONARY_SIZE] FROM $SYSTEM.DISCOVER_STORAGE_TABLE_COLUMNS\").Tables[0];\r\nvar DMV_StorageTables = ExecuteDax(\"SELECT [DIMENSION_NAME],[TABLE_ID],[ROWS_COUNT] FROM $SYSTEM.DISCOVER_STORAGE_TABLES\").Tables[0];\r\nvar DMV_ColumnSegments = ExecuteDax(\"SELECT [DIMENSION_NAME],[TABLE_ID],[COLUMN_ID],[USED_SIZE] FROM $SYSTEM.DISCOVER_STORAGE_TABLE_COLUMN_SEGMENTS\").Tables[0];\r\n\r\n// Remove Existing Vertipaq Annotations\r\nModel.RemoveAnnotation(\"Vertipaq_ModelSize\");\r\n\r\nforeach (var o in Model.AllHierarchies)\r\n{   \r\n    o.RemoveAnnotation(\"Vertipaq_HierarchyID\");\r\n    o.RemoveAnnotation(\"Vertipaq_UserHierarchySize\");    \r\n}\r\n\r\nforeach (var o in Model.AllColumns)\r\n{   \r\n    o.RemoveAnnotation(\"Vertipaq_ColumnID\");\r\n    o.RemoveAnnotation(\"Vertipaq_ColumnHierarchySize\");\r\n    o.RemoveAnnotation(\"Vertipaq_DataSize\");\r\n    o.RemoveAnnotation(\"Vertipaq_DictionarySize\");\r\n    o.RemoveAnnotation(\"Vertipaq_Cardinality\");\r\n    o.RemoveAnnotation(\"Vertipaq_ColumnSize\");\r\n    o.RemoveAnnotation(\"Vertipaq_ColumnSizePctOfTable\");\r\n    o.RemoveAnnotation(\"Vertipaq_ColumnSizePctOfModel\");\r\n}\r\n\r\nforeach (var o in Model.Relationships.ToList())\r\n{    \r\n    o.RemoveAnnotation(\"Vertipaq_RelationshipID\");\r\n    o.RemoveAnnotation(\"Vertipaq_RelationshipSize\");   \r\n    o.RemoveAnnotation(\"Vertipaq_MaxFromCardinality\");   \r\n    o.RemoveAnnotation(\"Vertipaq_MaxToCardinality\");   \r\n     \r\n}\r\n\r\nforeach (var o in Model.Tables.ToList())\r\n{\r\n    o.RemoveAnnotation(\"Vertipaq_TableID\");\r\n    o.RemoveAnnotation(\"Vertipaq_RowCount\");\r\n    o.RemoveAnnotation(\"Vertipaq_TableSize\");\r\n    o.RemoveAnnotation(\"Vertipaq_TableSizePctOfModel\");\r\n}\r\n\r\nforeach (var o in Model.AllPartitions)\r\n{\r\n    o.RemoveAnnotation(\"Vertipaq_PartitionID\");\r\n    o.RemoveAnnotation(\"Vertipaq_PartitionStorageID\");\r\n    o.RemoveAnnotation(\"Vertipaq_RecordCount\");\r\n    o.RemoveAnnotation(\"Vertipaq_RecordsPerSegment\");\r\n    o.RemoveAnnotation(\"Vertipaq_SegmentCount\");\r\n}\r\n\r\n// Set Table IDs\r\nfor (int r = 0; r < DMV_Tables.Rows.Count; r++)\r\n{\r\n    string tblID = DMV_Tables.Rows[r][0].ToString();\r\n    string tblName = DMV_Tables.Rows[r][1].ToString();\r\n    \r\n    Model.Tables[tblName].SetAnnotation(\"Vertipaq_TableID\",tblID);         \r\n}\r\n\r\n// Set Table Row Counts\r\nfor (int r = 0; r < DMV_Dimensions.Rows.Count; r++)\r\n{\r\n    string tblName = DMV_Dimensions.Rows[r][0].ToString();\r\n    string recordCount = DMV_Dimensions.Rows[r][1].ToString();\r\n    \r\n    if (tblName != \"Measures\")\r\n    {\r\n        Model.Tables[tblName].SetAnnotation(\"Vertipaq_RowCount\",recordCount);\r\n    }\r\n}\r\n\r\n// Set Relationship IDs\r\nfor (int r = 0; r < DMV_Relationships.Rows.Count; r++)\r\n{\r\n    string ID = DMV_Relationships.Rows[r][0].ToString();   \r\n    string relID = DMV_Relationships.Rows[r][1].ToString();    \r\n    \r\n    Model.Relationships[relID].SetAnnotation(\"Vertipaq_RelationshipID\",ID);    \r\n}\r\n\r\n// Set Hierarchy IDs\r\nfor (int r = 0; r < DMV_Hierarchies.Rows.Count; r++)\r\n{\r\n    string hID = DMV_Hierarchies.Rows[r][0].ToString();\r\n    string tableID = DMV_Hierarchies.Rows[r][1].ToString();\r\n    string hName = DMV_Hierarchies.Rows[r][2].ToString();\r\n    \r\n    foreach (var t in Model.Tables.Where(a => a.GetAnnotation(\"Vertipaq_TableID\") == tableID))\r\n    {\r\n        string tableName = t.Name;\r\n        Model.Tables[tableName].Hierarchies[hName].SetAnnotation(\"Vertipaq_HierarchyID\",hID);\r\n    }        \r\n}\r\n\r\n// Set Column IDs\r\nfor (int r = 0; r < DMV_Columns.Rows.Count; r++)\r\n{\r\n    string colID = DMV_Columns.Rows[r][0].ToString();\r\n    string tableID = DMV_Columns.Rows[r][1].ToString();\r\n    string colName = DMV_Columns.Rows[r][2].ToString();\r\n    \r\n    foreach (var t in Model.Tables.Where(a => a.GetAnnotation(\"Vertipaq_TableID\") == tableID))\r\n    {\r\n        string tableName = t.Name;\r\n        \r\n        if (colName.StartsWith(\"RowNumber-\") == false && colName != \"\")\r\n        {\r\n            Model.Tables[tableName].Columns[colName].SetAnnotation(\"Vertipaq_ColumnID\",colID);\r\n        }\r\n    }\r\n}\r\n\r\n// Set Partition IDs\r\nfor (int r = 0; r < DMV_Partitions.Rows.Count; r++)\r\n{\r\n    string pID = DMV_Partitions.Rows[r][0].ToString();\r\n    string tableID = DMV_Partitions.Rows[r][1].ToString();\r\n    string pName = DMV_Partitions.Rows[r][2].ToString();\r\n    \r\n    foreach (var t in Model.Tables.Where(a => a.GetAnnotation(\"Vertipaq_TableID\") == tableID))\r\n    {\r\n        string tableName = t.Name;\r\n        \r\n        Model.Tables[tableName].Partitions[pName].SetAnnotation(\"Vertipaq_PartitionID\",pID);        \r\n    }\r\n}\r\n\r\n\r\n// Set Partition Storage IDs\r\nfor (int r = 0; r < DMV_PartitionStorages.Rows.Count; r++)\r\n{\r\n    string psID = DMV_PartitionStorages.Rows[r][0].ToString();\r\n    string pID = DMV_PartitionStorages.Rows[r][1].ToString();    \r\n    \r\n    foreach (var p in Model.AllPartitions.Where(a => a.GetAnnotation(\"Vertipaq_PartitionID\") == pID))\r\n    {\r\n        string tableName = p.Table.Name;\r\n        string pName = p.Name;\r\n        \r\n        Model.Tables[tableName].Partitions[pName].SetAnnotation(\"Vertipaq_PartitionStorageID\",psID);        \r\n    }\r\n}\r\n\r\n// Set Partition Stats\r\nfor (int r = 0; r < DMV_SegmentMapStorages.Rows.Count; r++)\r\n{\r\n    string psID = DMV_SegmentMapStorages.Rows[r][0].ToString();\r\n    string recordCount = DMV_SegmentMapStorages.Rows[r][1].ToString();    \r\n    string segmentCount = DMV_SegmentMapStorages.Rows[r][2].ToString();    \r\n    string recordsPerSegment = DMV_SegmentMapStorages.Rows[r][3].ToString();    \r\n    \r\n    foreach (var p in Model.AllPartitions.Where(a => a.GetAnnotation(\"Vertipaq_PartitionStorageID\") == psID))\r\n    {\r\n        string tableName = p.Table.Name;\r\n        string pName = p.Name;\r\n        \r\n        Model.Tables[tableName].Partitions[pName].SetAnnotation(\"Vertipaq_RecordCount\",recordCount);\r\n        Model.Tables[tableName].Partitions[pName].SetAnnotation(\"Vertipaq_SegmentCount\",segmentCount);\r\n        Model.Tables[tableName].Partitions[pName].SetAnnotation(\"Vertipaq_RecordsPerSegment\",recordsPerSegment);\r\n    }\r\n}\r\n\r\n// Set Dictionary Size\r\nfor (int r = 0; r < DMV_StorageTableColumns.Rows.Count; r++)\r\n{\r\n    string tableName = DMV_StorageTableColumns.Rows[r][0].ToString();    \r\n    string colName = DMV_StorageTableColumns.Rows[r][1].ToString();\r\n    string colType = DMV_StorageTableColumns.Rows[r][2].ToString();\r\n    string dictSize = DMV_StorageTableColumns.Rows[r][3].ToString();\r\n      \r\n    if (colType == \"BASIC_DATA\" && colName.StartsWith(\"RowNumber-\") == false)\r\n    {\r\n        Model.Tables[tableName].Columns[colName].SetAnnotation(\"Vertipaq_DictionarySize\",dictSize);\r\n    }\r\n}\r\n\r\n// Set Column Row Counts\r\nfor (int r = 0; r < DMV_StorageTables.Rows.Count; r++)\r\n{\r\n    string tableName = DMV_StorageTables.Rows[r][0].ToString();    \r\n    string usedColumn = DMV_StorageTables.Rows[r][1].ToString();    \r\n    string rowCount = DMV_StorageTables.Rows[r][2].ToString();    \r\n    int lastInd = usedColumn.LastIndexOf(\"(\");\r\n    string usedColumnID = usedColumn.Substring(lastInd+1,usedColumn.Length - lastInd - 2);\r\n    \r\n    \r\n    foreach (var c in Model.Tables[tableName].Columns.Where(a => a.GetAnnotation(\"Vertipaq_ColumnID\") == usedColumnID))\r\n    {\r\n        var colName = c.Name;\r\n        Model.Tables[tableName].Columns[colName].SetAnnotation(\"Vertipaq_Cardinality\",rowCount);\r\n    }    \r\n}\r\n\r\n// User Hierarchy Size\r\nfor (int r = 0; r < DMV_ColumnSegments.Rows.Count; r++)\r\n{\r\n    string tableName = DMV_ColumnSegments.Rows[r][0].ToString();    \r\n    string usedObj = DMV_ColumnSegments.Rows[r][1].ToString();    \r\n    string usedCol = DMV_ColumnSegments.Rows[r][2].ToString();    \r\n    string usedSize = DMV_ColumnSegments.Rows[r][3].ToString();    \r\n    \r\n    int lastInd = usedObj.LastIndexOf(\"(\");\r\n    string usedObjID = usedObj.Substring(lastInd+1,usedObj.Length - lastInd - 2);    \r\n    \r\n    int lastInd2 = usedCol.LastIndexOf(\"(\");\r\n    string usedObjID2 = usedCol.Substring(lastInd2+1,usedCol.Length - lastInd2 - 2);    \r\n    \r\n    // User Hierarchy Size\r\n    foreach (var o in Model.Tables[tableName].Hierarchies.Where(a => a.GetAnnotation(\"Vertipaq_HierarchyID\") == usedObjID))\r\n    {\r\n        string hName = o.Name;\r\n        int hSize = Convert.ToInt32(Model.Tables[tableName].Hierarchies[hName].GetAnnotation(\"Vertipaq_UserHierarchySize\"));\r\n        \r\n        if (usedObj.StartsWith(\"U$\"))\r\n        {\r\n            if (hSize != null)\r\n            {\r\n                hSize = hSize + Convert.ToInt32(usedSize);\r\n            }\r\n            else\r\n            {\r\n                hSize = Convert.ToInt32(usedSize);\r\n            }\r\n        \r\n            Model.Tables[tableName].Hierarchies[hName].SetAnnotation(\"Vertipaq_UserHierarchySize\",hSize.ToString());                \r\n        }   \r\n    }    \r\n    \r\n    // Relationship Size\r\n    foreach (var o in Model.Relationships.Where(a => a.GetAnnotation(\"Vertipaq_RelationshipID\") == usedObjID))\r\n    {\r\n        string rName = o.ID;\r\n        int rSize = Convert.ToInt32(Model.Relationships[rName].GetAnnotation(\"Vertipaq_RelationshipSize\"));\r\n        \r\n        if (usedObj.StartsWith(\"R$\"))\r\n        {\r\n            if (rSize != null)\r\n            {\r\n                rSize = rSize + Convert.ToInt32(usedSize);\r\n            }\r\n            else\r\n            {\r\n                rSize = Convert.ToInt32(usedSize);\r\n            }\r\n        \r\n            Model.Relationships[rName].SetAnnotation(\"Vertipaq_RelationshipSize\",rSize.ToString());                \r\n        } \r\n    }\r\n    \r\n    // Column Hierarchy Size\r\n    foreach (var o in Model.Tables[tableName].Columns.Where(a => a.GetAnnotation(\"Vertipaq_ColumnID\") == usedObjID))\r\n    {\r\n        string colName = o.Name;\r\n        long colSize = Convert.ToInt64(Model.Tables[tableName].Columns[colName].GetAnnotation(\"Vertipaq_ColumnHierarchySize\"));\r\n        \r\n        if (usedObj.StartsWith(\"H$\"))\r\n        {\r\n            if (colSize != null)\r\n            {\r\n                colSize = colSize + Convert.ToInt32(usedSize);\r\n            }\r\n            else\r\n            {\r\n                colSize = Convert.ToInt64(usedSize);\r\n            }\r\n        \r\n            Model.Tables[tableName].Columns[colName].SetAnnotation(\"Vertipaq_ColumnHierarchySize\",colSize.ToString());                \r\n        }   \r\n    }  \r\n    \r\n    // Column Data Size\r\n    foreach (var o in Model.Tables[tableName].Columns.Where(a => a.GetAnnotation(\"Vertipaq_ColumnID\") == usedObjID2))\r\n    {\r\n        string colName = o.Name;\r\n        long colSize = Convert.ToInt64(Model.Tables[tableName].Columns[colName].GetAnnotation(\"Vertipaq_DataSize\"));\r\n        \r\n        if (usedObj.StartsWith(\"H$\") == false && usedObj.StartsWith(\"R$\") == false && usedObj.StartsWith(\"U$\") == false)\r\n        {\r\n            if (colSize != null)\r\n            {\r\n                colSize = colSize + Convert.ToInt64(usedSize);\r\n            }\r\n            else\r\n            {\r\n                colSize = Convert.ToInt64(usedSize);\r\n            }\r\n        \r\n            Model.Tables[tableName].Columns[colName].SetAnnotation(\"Vertipaq_DataSize\",colSize.ToString());                \r\n        }\r\n    }   \r\n}\r\n\r\n// Set Column & Table Size\r\nlong tableSizeCumulative = 0;\r\n\r\nforeach (var t in Model.Tables.ToList())\r\n{\r\n    string tableName = t.Name;\r\n    long colSizeCumulative = 0;\r\n    long userHierSizeCumulative = 0;\r\n    long relSizeCumulative = 0;       \r\n    \r\n    foreach (var c in t.Columns.ToList())\r\n    {        \r\n        string colName = c.Name;\r\n        var obj = Model.Tables[tableName].Columns[colName];\r\n        \r\n        long colHierSize = Convert.ToInt64(obj.GetAnnotation(\"Vertipaq_ColumnHierarchySize\"));\r\n        long dataSize = Convert.ToInt64(obj.GetAnnotation(\"Vertipaq_DataSize\"));\r\n        long dictSize = Convert.ToInt64(obj.GetAnnotation(\"Vertipaq_DictionarySize\"));\r\n        \r\n        long colSize = colHierSize + dataSize + dictSize;\r\n        colSizeCumulative = colSizeCumulative + colSize;        \r\n        \r\n        // Set Column Size\r\n        obj.SetAnnotation(\"Vertipaq_ColumnSize\",colSize.ToString());\r\n    }\r\n    \r\n    foreach (var h in t.Hierarchies.ToList())\r\n    {\r\n        string hName = h.Name;\r\n        var obj = Model.Tables[tableName].Hierarchies[hName];\r\n        \r\n        long userHierSize = Convert.ToInt32(obj.GetAnnotation(\"Vertipaq_UserHierarchySize\"));      \r\n        userHierSizeCumulative = userHierSizeCumulative + userHierSize;           \r\n    }\r\n    \r\n    foreach (var r in Model.Relationships.Where(a => a.FromTable.Name == tableName).ToList())\r\n    {\r\n        string rName = r.ID;\r\n        var obj = Model.Relationships[rName];\r\n        \r\n        long relSize = Convert.ToInt32(obj.GetAnnotation(\"Vertipaq_RelationshipSize\"));\r\n        \r\n        relSizeCumulative = relSizeCumulative + relSize;                \r\n    }\r\n    \r\n    long tableSize = colSizeCumulative + userHierSizeCumulative + relSizeCumulative;\r\n    tableSizeCumulative = tableSizeCumulative + tableSize;\r\n    \r\n    // Set Table Size\r\n    Model.Tables[tableName].SetAnnotation(\"Vertipaq_TableSize\",tableSize.ToString());\r\n}\r\n\r\n// Set Model Size\r\nModel.SetAnnotation(\"Vertipaq_ModelSize\",tableSizeCumulative.ToString());\r\n\r\n// Set Max From/To Cardinality\r\nforeach (var r in Model.Relationships.ToList())\r\n{\r\n    string rName = r.ID;\r\n    string fromTbl = r.FromTable.Name;\r\n    string fromCol = r.FromColumn.Name;\r\n    string toTbl = r.ToTable.Name;\r\n    string toCol = r.ToColumn.Name;\r\n    var obj = Model.Relationships[rName];\r\n    \r\n    string fromCard = Model.Tables[fromTbl].Columns[fromCol].GetAnnotation(\"Vertipaq_Cardinality\");\r\n    string toCard = Model.Tables[toTbl].Columns[toCol].GetAnnotation(\"Vertipaq_Cardinality\");\r\n    \r\n    obj.SetAnnotation(\"Vertipaq_MaxFromCardinality\",fromCard);\r\n    obj.SetAnnotation(\"Vertipaq_MaxToCardinality\",toCard);    \r\n}\r\n\r\n// Percent of Table and Model\r\nfloat modelSize = Convert.ToInt64(Model.GetAnnotation(\"Vertipaq_ModelSize\"));\r\n\r\nforeach (var t in Model.Tables.ToList())\r\n{\r\n    string tableName = t.Name;\r\n    var obj = Model.Tables[tableName];\r\n    \r\n    float tableSize = Convert.ToInt64(obj.GetAnnotation(\"Vertipaq_TableSize\"));\r\n    double tblpct = Math.Round(tableSize / modelSize,3);\r\n        \r\n    obj.SetAnnotation(\"Vertipaq_TableSizePctOfModel\",tblpct.ToString());\r\n    \r\n    foreach (var c in t.Columns.ToList())\r\n    {\r\n        string colName = c.Name;\r\n        var col = Model.Tables[tableName].Columns[colName];\r\n        \r\n        float colSize = Convert.ToInt64(col.GetAnnotation(\"Vertipaq_ColumnSize\"));\r\n        double colpctTbl = Math.Round(colSize / tableSize,3);\r\n        double colpctModel = Math.Round(colSize / modelSize,3);\r\n        \r\n        col.SetAnnotation(\"Vertipaq_ColumnSizePctOfTable\",colpctTbl.ToString());\r\n        col.SetAnnotation(\"Vertipaq_ColumnSizePctOfModel\",colpctModel.ToString());\r\n    }\r\n}\r\n\r\n// Remove Vertipaq ID Annotations\r\nforeach (var o in Model.AllHierarchies)\r\n{   \r\n    o.RemoveAnnotation(\"Vertipaq_HierarchyID\");\r\n}\r\n\r\nforeach (var o in Model.AllColumns)\r\n{\r\n    o.RemoveAnnotation(\"Vertipaq_ColumnID\");\r\n}\r\n\r\nforeach (var o in Model.Relationships.ToList())\r\n{    \r\n    o.RemoveAnnotation(\"Vertipaq_RelationshipID\");    \r\n}\r\n\r\nforeach (var o in Model.Tables.ToList())\r\n{\r\n    o.RemoveAnnotation(\"Vertipaq_TableID\");\r\n}\r\n\r\nforeach (var o in Model.AllPartitions)\r\n{\r\n    o.RemoveAnnotation(\"Vertipaq_PartitionID\");\r\n    o.RemoveAnnotation(\"Vertipaq_PartitionStorageID\");\r\n}",
      "Tooltip": "Generate VertiPaq Analyzer metadata as annotations ",
      "ValidContexts": "Model"
    },
    {
      "Name": "Best Practices\\3. Export BPA Results",
      "Enabled": "true",
      "Execute": "using TabularEditor.BestPracticeAnalyzer;\r\n\r\nvar bpa = new Analyzer();\r\nbpa.SetModel(Model);\r\n\r\nvar sb = new System.Text.StringBuilder();\r\nstring newline = Environment.NewLine;\r\n\r\nsb.Append(\"RuleCategory\" + '\\t' + \"RuleName\" + '\\t' + \"ObjectName\" + '\\t' + \"ObjectType\" + '\\t' + \"Ignored\" + '\\t' + \"RuleSeverity\" + '\\t' + \"HasFixExpression\" + newline);\r\n\r\nforeach (var a in bpa.AnalyzeAll().ToList())\r\n{\r\n    sb.Append(a.Rule.Category + '\\t' + a.RuleName + '\\t' + a.ObjectName + '\\t' + a.ObjectType + '\\t' + a.Ignored + '\\t' + a.Rule.Severity + '\\t' + a.CanFix + newline);\r\n}\r\n\r\nsb.Output();",
      "Tooltip": "Export BPA validation details (can be pasted to Excel)",
      "ValidContexts": "Model"
    }
  ]
}